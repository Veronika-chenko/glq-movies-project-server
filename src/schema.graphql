type Query {
  movies(filter: MoviesFilterInput): Movies
  moviesByIds(ids: [Int]): [Movie]
  genres: [Genre]
}
#  search by many fields:
input MoviesFilterInput {
  page: Int
  sortBy: String
  sortDirection: SORT_DIRECTION
  includeAdult: Boolean
  year: Int
  primaryReleaseYear: Int
  genre: Int
}

enum SORT_DIRECTION {
  desc
  asc
}

type Movies {
  page: Int!
  totalResults: Int!
  totalPages: Int!
  results: [Movie!]!
}

type Movie {
  id: ID!
  adult: Boolean
  backdropPath: String
  genres: [Genre]
  originalLanguage: String
  originalTitle: String!
  overview: String
  popularity: Float
  posterPath: String!
  releaseDate(format: String): String!
  title: String!
  video: Boolean
  voteAvarage: Float
  voteCount: Int
}

type Genre {
  id: Int!
  name: String!
}
